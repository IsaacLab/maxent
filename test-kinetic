#!/usr/bin/env python

from ising import ising, kinetic_ising, Entropy
import numpy as np

size=10
T=2000
y1=kinetic_ising(size)
y1.random_wiring()
#for i in range(size):
#	y1.h[i]=0
#	y1.J[i,i]=0

##print y1.J
#y1.pdfMC(1000)
#PMC=y1.P.copy()
#y1.pdf()
#print np.mean(np.sqrt(np.abs(PMC -y1.P)**2)),np.max(PMC -y1.P)
##exit(0)
#y1.uniform_pdf()
y1.observablesMC(T)

print y1.P
print y1.m
print y1.D


#exit(0)

error=1E-3
m1=y1.m.copy()
#C1=y1.C.copy()
D1=y1.D.copy()

y=kinetic_ising(size)
y.P=y1.P.copy()

y.independent_model(m1)
fit=y.inverse(m1,D1,error)
print fit
print np.mean(np.sqrt(np.abs(y.h-y1.h)**2)),np.max(np.abs(y.h-y1.h))
print np.mean(np.sqrt(np.abs(y.J-y1.J)**2)),np.max(np.abs(y.J-y1.J))
print
print y.h
print y1.h

print
print y.J
print y1.J
#print np.mean(np.sqrt(np.abs(y.P-y1.P)**2)),np.max(np.abs(y.P-y1.P))

#exit(0)

#P=y.P.copy()
#y.pdfMC(10000)
#print np.mean(np.sqrt(np.abs(y.P-P)**2)),np.max(np.abs(y.P-P))
#y.observablesMC(1000)
#y1.observablesMC(1000)

##print np.max(np.abs(y.D-y1.D))
##print np.max(np.abs(y.m-y1.m))

#y.observablesMC(1000)
#y1.observablesMC(1000)

#print np.max(np.abs(y.D-y1.D))
#print np.max(np.abs(y.m-y1.m))
